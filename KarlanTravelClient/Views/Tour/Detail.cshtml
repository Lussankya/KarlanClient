@model IEnumerable<KarlanTravelClient.Models.TourDetail>


@{ ViewBag.Title = "Detail";
    Layout = "~/Views/_LayoutPage1.cshtml"; }

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
<script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
        integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
        crossorigin=""></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
      integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
      crossorigin="" />
<script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js" integrity="sha512-aVKKRRi/Q/YV+4mjoKBsE4x3H+BkegoM/em46NNlCqNTmUYADjBbeNefNxYV7giUp0VxICtqdrbqU7iVaeZNXA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<style>
    p {
        margin: 2%;
        border-right: 2px solid black;
        padding-right: 5%
    }

    .detailBtn {
        background-color: green;
        color: white;
        margin-top: 1%;
        margin-left: 30%;
        padding: 3%
    }
    .leaflet-control-container .leaflet-routing-container-hide {
        display: none;
    }
</style>


<body>
    <div>

        <div class="row">

            <div class="col-lg-1"></div>


            <div class="col-lg-6">
                @foreach (var item in Model)
                {
    <div class="container">

        <div class="row">
            <div class="col" style="margin-bottom:3%">
                <p>

                    Activity <br />
                    @Html.DisplayFor(modelItem => item.Activity)
                    <hr />
                </p>
            </div>
            <hr />
            <div class="col">
                <p>
                    Startingtime <br /> @Html.DisplayFor(modelItem => item.ActivityTimeStart)

                </p>
                <hr />
            </div>
            <div class="col">
                <p>
                    Endingtime <br /> @Html.DisplayFor(modelItem => item.ActivityTimeEnd)
                <p>

                <hr />
            </div>
        </div>
    </div>}

            </div>
            <div class="col-lg-4">
                @foreach (var item in Model)
                {

    <img src="@item.Tour.TourImage" class="card-img-top" style="margin-top:10%">
                    <div class="card-body">
                        <h5 class="card-title">@item.Tour.TourName</h5>
                        <div class="card-text">
                            @if (item.Tour.CategoryId1 != "UNCG")
                            {
                            @item.Tour.Category.CategoryName}
                            -
                            @if (item.Tour.CategoryId2 != "UNCG")
                            {
                        @item.Tour.Category1.CategoryName}
                        </div>

                        <div class="card-text">
                            <i class="fa fa-clock-o" aria-hidden="true"></i>
                            From @item.Tour.TourStart.ToString("HH:mm dd/MM/yyyy") to @item.Tour.TourEnd.ToString("HH:mm dd/MM/yyyy")
                        </div>
                        <div class="card-text">
                            <i class="fa fa-star" aria-hidden="true"></i>
                            @item.Tour.TourRating/5
                        </div>
                        <div class="card-text">
                            <i class="fa fa-usd" aria-hidden="true"></i>
                            Price: @((int)item.Tour.TourPrice) VND
                        </div>
                        <div>
                            @Html.ActionLink("Transaction", "Views", "Home", new { id = item.TourId }, new { @class = "btn btn - primary detailBtn" })
                            @*<a href="#" class="">Go somewhere</a>*@
                        </div>
                    </div>break;

                }
                <div class="map ">
                    <div id="map" style="height:500px;"></div>
                </div>

            </div>

            <div class="col-lg-1"></div>
        </div>
    </div>
</body>


<script>
    
    var map = L.map('map').setView([21.001975258290276, 105.8031678199768], 10);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '© OpenStreetMap'
    }).addTo(map);

    var mapListJson = @Html.Raw(Json.Encode(ViewBag.Map));
    var spotNameJson = @Html.Raw(Json.Encode(ViewBag.SpotName));
    var prevLat = mapListJson[0];
    var prevLong = mapListJson[1];

    let j = 0;
    //pathfinding
    //for (let i = 0; i < mapListJson.length - 1; i += 2) {
        
    //    var marker = L.marker([mapListJson[i], mapListJson[i + 1]]).addTo(map);
    //    var markers = [
    //        { pos: [mapListJson[i], mapListJson[i+1]], popup: spotNameJson[j] }];
    //    markers.forEach(function (obj) {
    //        var m = L.marker(obj.pos).addTo(map),
    //            p = new L.Popup({ autoClose: false, closeOnClick: false })
    //                .setContent(obj.popup)
    //                .setLatLng(obj.pos);
    //        m.bindPopup(p).openPopup();
    //    });
    //    L.Routing.control({
    //        show: false,
            
    //        draggableWaypoints: false,
    //        routeWhileDragging: false,
    //        createMarker: function () { return null; },
    //        lineOptions: {
    //            addWaypoints: false
    //        },
    //        waypoints: [

    //            L.latLng(mapListJson[i], mapListJson[i+1]),
    //            L.latLng(prevLat, prevLong)
    //        ]
    //    }).addTo(map);
    //    prevLat = mapListJson[i];
    //    prevLong = mapListJson[i + 1];
    //    j++;
    //}
    //polyline
    var points = [];
    for (let i = 0; i < mapListJson.length - 1; i += 2) {
        points.push([mapListJson[i], mapListJson[i + 1]]);
        L.marker([mapListJson[i], mapListJson[i+1]]).addTo(map);
        L.polyline(points).addTo(map);
        console.log(points);
        
    }
    L.polyline(points).addTo(map);



</script>

